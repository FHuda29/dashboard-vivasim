{
  "version": 3,
  "sources": ["../../@mui/x-charts/ChartsAxis/ChartsAxis.js"],
  "sourcesContent": ["'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { useCartesianContext } from \"../context/CartesianProvider/index.js\";\nimport { ChartsXAxis } from \"../ChartsXAxis/index.js\";\nimport { ChartsYAxis } from \"../ChartsYAxis/index.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst getAxisId = (propsValue, defaultAxisId) => {\n  if (propsValue == null) {\n    return null;\n  }\n  if (typeof propsValue === 'object') {\n    return propsValue.axisId ?? defaultAxisId ?? null;\n  }\n  return propsValue;\n};\nconst mergeProps = (axisConfig, slots, slotProps) => {\n  return typeof axisConfig === 'object' ? _extends({}, axisConfig, {\n    slots: _extends({}, slots, axisConfig?.slots),\n    slotProps: _extends({}, slotProps, axisConfig?.slotProps)\n  }) : {\n    slots,\n    slotProps\n  };\n};\n\n/**\n * Demos:\n *\n * - [Axis](https://mui.com/x/react-charts/axis/)\n *\n * API:\n *\n * - [ChartsAxis API](https://mui.com/x/api/charts/charts-axis/)\n */\nfunction ChartsAxis(props) {\n  const {\n    topAxis,\n    leftAxis,\n    rightAxis,\n    bottomAxis,\n    slots,\n    slotProps\n  } = props;\n  const {\n    xAxis,\n    xAxisIds,\n    yAxis,\n    yAxisIds\n  } = useCartesianContext();\n\n  // TODO: use for plotting line without ticks or any thing\n  // const drawingArea = React.useContext(DrawingContext);\n\n  const leftId = getAxisId(leftAxis === undefined ? yAxisIds[0] : leftAxis, yAxisIds[0]);\n  const bottomId = getAxisId(bottomAxis === undefined ? xAxisIds[0] : bottomAxis, xAxisIds[0]);\n  const topId = getAxisId(topAxis, xAxisIds[0]);\n  const rightId = getAxisId(rightAxis, yAxisIds[0]);\n  if (topId !== null && !xAxis[topId]) {\n    throw new Error([`MUI X: id used for top axis \"${topId}\" is not defined.`, `Available ids are: ${xAxisIds.join(', ')}.`].join('\\n'));\n  }\n  if (leftId !== null && !yAxis[leftId]) {\n    throw new Error([`MUI X: id used for left axis \"${leftId}\" is not defined.`, `Available ids are: ${yAxisIds.join(', ')}.`].join('\\n'));\n  }\n  if (rightId !== null && !yAxis[rightId]) {\n    throw new Error([`MUI X: id used for right axis \"${rightId}\" is not defined.`, `Available ids are: ${yAxisIds.join(', ')}.`].join('\\n'));\n  }\n  if (bottomId !== null && !xAxis[bottomId]) {\n    throw new Error([`MUI X: id used for bottom axis \"${bottomId}\" is not defined.`, `Available ids are: ${xAxisIds.join(', ')}.`].join('\\n'));\n  }\n  const topAxisProps = mergeProps(topAxis, slots, slotProps);\n  const bottomAxisProps = mergeProps(bottomAxis, slots, slotProps);\n  const leftAxisProps = mergeProps(leftAxis, slots, slotProps);\n  const rightAxisProps = mergeProps(rightAxis, slots, slotProps);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [topId && /*#__PURE__*/_jsx(ChartsXAxis, _extends({}, topAxisProps, {\n      position: \"top\",\n      axisId: topId\n    })), bottomId && /*#__PURE__*/_jsx(ChartsXAxis, _extends({}, bottomAxisProps, {\n      position: \"bottom\",\n      axisId: bottomId\n    })), leftId && /*#__PURE__*/_jsx(ChartsYAxis, _extends({}, leftAxisProps, {\n      position: \"left\",\n      axisId: leftId\n    })), rightId && /*#__PURE__*/_jsx(ChartsYAxis, _extends({}, rightAxisProps, {\n      position: \"right\",\n      axisId: rightId\n    }))]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? ChartsAxis.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * Indicate which axis to display the bottom of the charts.\n   * Can be a string (the id of the axis) or an object `ChartsXAxisProps`.\n   * @default xAxisIds[0] The id of the first provided axis\n   */\n  bottomAxis: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  /**\n   * Indicate which axis to display the left of the charts.\n   * Can be a string (the id of the axis) or an object `ChartsYAxisProps`.\n   * @default yAxisIds[0] The id of the first provided axis\n   */\n  leftAxis: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  /**\n   * Indicate which axis to display the right of the charts.\n   * Can be a string (the id of the axis) or an object `ChartsYAxisProps`.\n   * @default null\n   */\n  rightAxis: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  /**\n   * The props used for each component slot.\n   * @default {}\n   */\n  slotProps: PropTypes.object,\n  /**\n   * Overridable component slots.\n   * @default {}\n   */\n  slots: PropTypes.object,\n  /**\n   * Indicate which axis to display the top of the charts.\n   * Can be a string (the id of the axis) or an object `ChartsXAxisProps`.\n   * @default null\n   */\n  topAxis: PropTypes.oneOfType([PropTypes.object, PropTypes.string])\n} : void 0;\nexport { ChartsAxis };"],
  "mappings": "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",
  "names": ["_jsxs", "_jsx", "PropTypes"]
}
