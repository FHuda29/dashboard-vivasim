{
  "version": 3,
  "sources": ["../../@mui/x-tree-view/useTreeItem2/useTreeItem2.js", "../../@mui/x-tree-view/useTreeItem2/index.js"],
  "sourcesContent": ["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport extractEventHandlers from '@mui/utils/extractEventHandlers';\nimport useForkRef from '@mui/utils/useForkRef';\nimport { useTreeViewContext } from \"../internals/TreeViewProvider/index.js\";\nimport { useTreeItem2Utils } from \"../hooks/useTreeItem2Utils/index.js\";\nimport { TreeViewItemDepthContext } from \"../internals/TreeViewItemDepthContext/index.js\";\nimport { isTargetInDescendants } from \"../internals/utils/tree.js\";\nimport { generateTreeItemIdAttribute } from \"../internals/corePlugins/useTreeViewId/useTreeViewId.utils.js\";\nexport const useTreeItem2 = parameters => {\n  const {\n    runItemPlugins,\n    items: {\n      onItemClick,\n      disabledItemsFocusable,\n      indentationAtItemLevel\n    },\n    selection: {\n      disableSelection,\n      checkboxSelection\n    },\n    expansion: {\n      expansionTrigger\n    },\n    treeId,\n    instance,\n    publicAPI\n  } = useTreeViewContext();\n  const depthContext = React.useContext(TreeViewItemDepthContext);\n  const {\n    id,\n    itemId,\n    label,\n    children,\n    rootRef\n  } = parameters;\n  const {\n    rootRef: pluginRootRef,\n    contentRef,\n    propsEnhancers\n  } = runItemPlugins(parameters);\n  const {\n    interactions,\n    status\n  } = useTreeItem2Utils({\n    itemId,\n    children\n  });\n  const rootRefObject = React.useRef(null);\n  const contentRefObject = React.useRef(null);\n  const handleRootRef = useForkRef(rootRef, pluginRootRef, rootRefObject);\n  const handleContentRef = useForkRef(contentRef, contentRefObject);\n  const checkboxRef = React.useRef(null);\n  const idAttribute = generateTreeItemIdAttribute({\n    itemId,\n    treeId,\n    id\n  });\n  const rootTabIndex = instance.canItemBeTabbed(itemId) ? 0 : -1;\n  const sharedPropsEnhancerParams = {\n    rootRefObject,\n    contentRefObject,\n    interactions\n  };\n  const createRootHandleFocus = otherHandlers => event => {\n    otherHandlers.onFocus?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const canBeFocused = !status.disabled || disabledItemsFocusable;\n    if (!status.focused && canBeFocused && event.currentTarget === event.target) {\n      instance.focusItem(event, itemId);\n    }\n  };\n  const createRootHandleBlur = otherHandlers => event => {\n    otherHandlers.onBlur?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const rootElement = instance.getItemDOMElement(itemId);\n\n    // Don't blur the root when switching to editing mode\n    // the input that triggers the root blur can be either the relatedTarget (when entering editing state) or the target (when exiting editing state)\n    // when we enter the editing state, we focus the input -> we don't want to remove the focused item from the state\n    if (status.editing ||\n    // we can exit the editing state by clicking outside the input (within the Tree Item) or by pressing Enter or Escape -> we don't want to remove the focused item from the state in these cases\n    // we can also exit the editing state by clicking on the root itself -> want to remove the focused item from the state in this case\n    event.relatedTarget && isTargetInDescendants(event.relatedTarget, rootElement) && (event.target && event.target?.dataset?.element === 'labelInput' && isTargetInDescendants(event.target, rootElement) || event.relatedTarget?.dataset?.element === 'labelInput')) {\n      return;\n    }\n    instance.removeFocusedItem();\n  };\n  const createRootHandleKeyDown = otherHandlers => event => {\n    otherHandlers.onKeyDown?.(event);\n    if (event.defaultMuiPrevented || event.target?.dataset?.element === 'labelInput') {\n      return;\n    }\n    instance.handleItemKeyDown(event, itemId);\n  };\n  const createLabelHandleDoubleClick = otherHandlers => event => {\n    otherHandlers.onDoubleClick?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    interactions.toggleItemEditing();\n  };\n  const createContentHandleClick = otherHandlers => event => {\n    otherHandlers.onClick?.(event);\n    onItemClick?.(event, itemId);\n    if (event.defaultMuiPrevented || checkboxRef.current?.contains(event.target)) {\n      return;\n    }\n    if (expansionTrigger === 'content') {\n      interactions.handleExpansion(event);\n    }\n    if (!checkboxSelection) {\n      interactions.handleSelection(event);\n    }\n  };\n  const createContentHandleMouseDown = otherHandlers => event => {\n    otherHandlers.onMouseDown?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n\n    // Prevent text selection\n    if (event.shiftKey || event.ctrlKey || event.metaKey || status.disabled) {\n      event.preventDefault();\n    }\n  };\n  const createCheckboxHandleChange = otherHandlers => event => {\n    otherHandlers.onChange?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (disableSelection || status.disabled) {\n      return;\n    }\n    interactions.handleCheckboxSelection(event);\n  };\n  const createIconContainerHandleClick = otherHandlers => event => {\n    otherHandlers.onClick?.(event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (expansionTrigger === 'iconContainer') {\n      interactions.handleExpansion(event);\n    }\n  };\n  const getRootProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));\n\n    // https://www.w3.org/WAI/ARIA/apg/patterns/treeview/\n    let ariaSelected;\n    if (status.selected) {\n      // - each selected node has aria-selected set to true.\n      ariaSelected = true;\n    } else if (disableSelection || status.disabled) {\n      // - if the tree contains nodes that are not selectable, aria-selected is not present on those nodes.\n      ariaSelected = undefined;\n    } else {\n      // - all nodes that are selectable but not selected have aria-selected set to false.\n      ariaSelected = false;\n    }\n    const props = _extends({}, externalEventHandlers, {\n      ref: handleRootRef,\n      role: 'treeitem',\n      tabIndex: rootTabIndex,\n      id: idAttribute,\n      'aria-expanded': status.expandable ? status.expanded : undefined,\n      'aria-selected': ariaSelected,\n      'aria-disabled': status.disabled || undefined\n    }, externalProps, {\n      onFocus: createRootHandleFocus(externalEventHandlers),\n      onBlur: createRootHandleBlur(externalEventHandlers),\n      onKeyDown: createRootHandleKeyDown(externalEventHandlers)\n    });\n    if (indentationAtItemLevel) {\n      props.style = {\n        '--TreeView-itemDepth': typeof depthContext === 'function' ? depthContext(itemId) : depthContext\n      };\n    }\n    const enhancedRootProps = propsEnhancers.root?.(_extends({}, sharedPropsEnhancerParams, {\n      externalEventHandlers\n    })) ?? {};\n    return _extends({}, props, enhancedRootProps);\n  };\n  const getContentProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const props = _extends({}, externalEventHandlers, externalProps, {\n      ref: handleContentRef,\n      onClick: createContentHandleClick(externalEventHandlers),\n      onMouseDown: createContentHandleMouseDown(externalEventHandlers),\n      status\n    });\n    if (indentationAtItemLevel) {\n      props.indentationAtItemLevel = true;\n    }\n    const enhancedContentProps = propsEnhancers.content?.(_extends({}, sharedPropsEnhancerParams, {\n      externalEventHandlers\n    })) ?? {};\n    return _extends({}, props, enhancedContentProps);\n  };\n  const getCheckboxProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({}, externalEventHandlers, {\n      visible: checkboxSelection,\n      ref: checkboxRef,\n      checked: status.selected,\n      disabled: disableSelection || status.disabled,\n      tabIndex: -1\n    }, externalProps, {\n      onChange: createCheckboxHandleChange(externalEventHandlers)\n    });\n  };\n  const getLabelProps = (externalProps = {}) => {\n    const externalEventHandlers = _extends({}, extractEventHandlers(externalProps));\n    const props = _extends({}, externalEventHandlers, {\n      children: label\n    }, externalProps, {\n      onDoubleClick: createLabelHandleDoubleClick(externalEventHandlers)\n    });\n    if (instance.isTreeViewEditable) {\n      props.editable = status.editable;\n    }\n    return props;\n  };\n  const getLabelInputProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const enhancedLabelInputProps = propsEnhancers.labelInput?.({\n      rootRefObject,\n      contentRefObject,\n      externalEventHandlers,\n      interactions\n    }) ?? {};\n    return _extends({}, externalProps, enhancedLabelInputProps);\n  };\n  const getIconContainerProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    return _extends({}, externalEventHandlers, externalProps, {\n      onClick: createIconContainerHandleClick(externalEventHandlers)\n    });\n  };\n  const getGroupTransitionProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const response = _extends({}, externalEventHandlers, {\n      unmountOnExit: true,\n      component: 'ul',\n      role: 'group',\n      in: status.expanded,\n      children\n    }, externalProps);\n    if (indentationAtItemLevel) {\n      response.indentationAtItemLevel = true;\n    }\n    return response;\n  };\n  const getDragAndDropOverlayProps = (externalProps = {}) => {\n    const externalEventHandlers = extractEventHandlers(externalProps);\n    const enhancedDragAndDropOverlayProps = propsEnhancers.dragAndDropOverlay?.(_extends({}, sharedPropsEnhancerParams, {\n      externalEventHandlers\n    })) ?? {};\n    return _extends({}, externalProps, enhancedDragAndDropOverlayProps);\n  };\n  return {\n    getRootProps,\n    getContentProps,\n    getGroupTransitionProps,\n    getIconContainerProps,\n    getCheckboxProps,\n    getLabelProps,\n    getLabelInputProps,\n    getDragAndDropOverlayProps,\n    rootRef: handleRootRef,\n    status,\n    publicAPI\n  };\n};", "import { useTreeItem2 as useTreeItem2Export } from \"./useTreeItem2.js\";\nexport const useTreeItem2 = useTreeItem2Export;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const unstable_useTreeItem2 = useTreeItem2Export;"],
  "mappings": "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",
  "names": ["useTreeItem2"]
}
